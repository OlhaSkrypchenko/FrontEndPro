1. В чём разница между BOM и DOM?
   
   DOM – часть BOM, 
         которая представляет структуру html-страницы в виде объектов (документ),
         с которыми может взаимодействовать JS (добавлять, удалять, изменять).

   BOM  – это дополнительные объекты, 
          предоставляемые браузером (окружением), 
          чтобы работать со всем(navigator, location, screen, screen...),
          кроме документа.

2. В чём принципиальная разница между выводом 
   сообщений с помощью alert и console.log?

    1)  alert - модальное окно, которое блокирует выполнение скрипта на странице, 
                пока пользователь не нажмет кнопку OK или Esc

        console.log - метод обьекта браузера console, который выводит сообщение 
                      в консоли не прекращая дальнейшего выполнения кода на странице

    2)  alert - неявно преобразовывает переданное сообщение в нем в строку,
                но не может неявно преобразовать в строку обьект и символ,
                поэтому вывод обьекта будет выглядеть: [object Object],
                а при попытке вывести символ будет ошибка TypeError  

        console.log - без проблем выведет и объект и символ
   
3. Чем отличаются ошибки чтения от ошибок выполнения? 

    Этапом их обнаружения.
    Ошибки чтения обнаруживаются, когда скрипт парсится(анализируется, читается) движком браузера (SyntaxError),
    а ошибки выполнения на этапе непосредственного выполнения скрипта (TypeError, ReferenceError).

4. Всё ли верно? 

    1) var m; 

      Все верно, но называть переменную одной буквой является очень
      плохой практикой, так как такое название не отображает сущности
      значения переменной. Это плохо при поддержке кода.
   
    2) var M;

      Ошибки не будет, но в JS принято за основу camelCase,
      тоесть название переменных если начинается с буквы,
      то буква должна быть в малом регистре.

      А также называть переменную одной буквой является очень
      плохой практикой, так как такое название не отображает сущности
      значения переменной. Это плохо при поддержке кода.
      

    3) var 7e; 

       Нельзя чтобы имя переменной в JS начиналось из цифры.
       В данном случае будет SyntaxError

5. Как привести значение любого примитива к булевому? (true/false)
    
    - Происходит в логических операторах
    - Boolean();
    - !! - двойное отрицание возвращает булевое значение;
    - ! - оператор  отрицания 'не' возвращает противоположное булевое значение.
 
6. Какой будет результат выражений?
   По возможности, объясните почему именно такой результат.
   
    1) "23" + 20 + ''  // "2320";

       Если у выражении исользуется оператор "+"
       и хотя бы один из операндов строка, 
       то оператор "+" - оператор конкатенации

    2) "1" + (20 + 3)  // "123";

       Оператор группирования "()" имеет больший приоритет,
       чем оператор конкатенации, поэтому сначала
       выполняется сложение внутри скобок, а именно 20 + 3,
       а потом выполняется конкатенация строки из получившимся числом

    3) "a" / 5  // NaN;

        При математических операциях таких как деление, 
        умножение, вычетание... происходит преобразование операндов к числу,
        если их тип данных таковым не является.
        В данном случае строка "а" преобразовывается в NaN,
        а при любой матиматической операции с NaN возвращается NaN

    4) ("str" || 5) > 0 || (10 && true)  // true

        У нас есть два выражения разделенных логическим оператором или "||"
        первое - ("str" || 5) > 0,
        второе - (10 && true),
        так как оператор группирования "()" и оператор сравнения ">" имеют 
        больше приоритет, чем оператор "||".

        Разберем первое выражение ("str" || 5) > 0:
         - сначала выполняется действие в скобках(т.к. у них больше приоритет)
         - логический оператор "||" вычисляет операнды слева направо,
           конвертирует их к булеевому значению, если они такими не являются,
           и возвращает первый истинный операнд без преобразования, 
           а если все операнды имеют ложное значение, то вернется 
           последний операнд из ложным значением без преобразования.
           
           В нашем случае вернется "str" как первое истинное значение
         
         - далее у нас происходит сравнение "str" > 0,
           оператор сравнения преобразовывает операнды разных типов к числу, сравнивает их 
           и возвращает булевое значание результата сравнения.
           
           В нашем случае вернется false
           
           Тоесть результатом первого выражения будет false

        Разберем второе выражение (10 && true):
         - логический оператор "&&" вычисляет операнды слева направо,
           конвертирует их к булеевому значению, 
           и возвращает последний истинный операнд без преобразования, 
           если все операнды имееют истинное значение, 
           если хоть один из операндов имеет ложное значение, то вернется 
           первое ложное значение без преобразования 
           
           В нашем случае вернется "true", та как все операнды истинные.

        И так результатами 
        первого выражения - ("str" || 5) > 0 будет false
        второго - (10 && true) - true

        Для последнего дейтвия у нас получается такое выражение:

        false || true, результатом которого будет true
        (принцип работы логического оператора "||", я описывала ранее)
        

          